"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _express = _interopRequireDefault(require("express"));

var _dummyUser = _interopRequireDefault(require("../../data/dummy-user"));

var _constants = require("../../util/constants");

var _helpers = require("../../util/helpers");

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var router = _express["default"].Router();

var PSS_BASE_URL = process.env.PSS_BASE_URL;
var tenantId = process.env.TENANT_ID;
var secret = process.env.SECRET;
router.post('/', function (req, res) {
  var userExternalId = _dummyUser["default"].users[0].uuid;
  var authParams = {
    guiText: 'Do you okay this transaction',
    guiHeader: 'Authorization requested'
  };
  var type = _constants.AUTH_TYPES.OK;
  var hashStr = "".concat(tenantId).concat(userExternalId).concat(secret);
  var signature = (0, _helpers.createHashSignature)(hashStr);
  console.log(signature);
  (0, _axios["default"])({
    method: 'post',
    headers: {
      'Content-Type': 'application/json'
    },
    url: "".concat(PSS_BASE_URL, "/gateway/auth"),
    data: {
      tenantId: tenantId,
      userExternalId: userExternalId,
      type: type,
      authParams: authParams,
      signature: signature
    }
  }).then(function (response) {
    res.json({
      msg: 'Authentication successful',
      data: response.data
    });
  })["catch"](function (error) {
    res.status(400).json({
      msg: 'Authentication unsuccessful',
      data: error.response.data
    });
  });
});
var _default = router;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yb3V0ZXMvYXV0aC9pbmRleC5qcyJdLCJuYW1lcyI6WyJyb3V0ZXIiLCJleHByZXNzIiwiUm91dGVyIiwiUFNTX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsInRlbmFudElkIiwiVEVOQU5UX0lEIiwic2VjcmV0IiwiU0VDUkVUIiwicG9zdCIsInJlcSIsInJlcyIsInVzZXJFeHRlcm5hbElkIiwiU1RPUkUiLCJ1c2VycyIsInV1aWQiLCJhdXRoUGFyYW1zIiwiZ3VpVGV4dCIsImd1aUhlYWRlciIsInR5cGUiLCJBVVRIX1RZUEVTIiwiT0siLCJoYXNoU3RyIiwic2lnbmF0dXJlIiwiY29uc29sZSIsImxvZyIsIm1ldGhvZCIsImhlYWRlcnMiLCJ1cmwiLCJkYXRhIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsIm1zZyIsImVycm9yIiwic3RhdHVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBR0E7Ozs7QUFFQSxJQUFNQSxNQUFNLEdBQUdDLG9CQUFRQyxNQUFSLEVBQWY7O0FBQ0EsSUFBTUMsWUFBWSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsWUFBakM7QUFDQSxJQUFNRyxRQUFRLEdBQUdGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxTQUE3QjtBQUNBLElBQU1DLE1BQU0sR0FBR0osT0FBTyxDQUFDQyxHQUFSLENBQVlJLE1BQTNCO0FBRUFULE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLEdBQVosRUFBaUIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDN0IsTUFBTUMsY0FBYyxHQUFHQyxzQkFBTUMsS0FBTixDQUFZLENBQVosRUFBZUMsSUFBdEM7QUFDQSxNQUFNQyxVQUFVLEdBQUc7QUFDakJDLElBQUFBLE9BQU8sRUFBRSw4QkFEUTtBQUVqQkMsSUFBQUEsU0FBUyxFQUFFO0FBRk0sR0FBbkI7QUFJQSxNQUFNQyxJQUFJLEdBQUdDLHNCQUFXQyxFQUF4QjtBQUNBLE1BQU1DLE9BQU8sYUFBTWpCLFFBQU4sU0FBaUJPLGNBQWpCLFNBQWtDTCxNQUFsQyxDQUFiO0FBQ0EsTUFBTWdCLFNBQVMsR0FBRyxrQ0FBb0JELE9BQXBCLENBQWxCO0FBQ0FFLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixTQUFaO0FBRUEseUJBQU07QUFDRkcsSUFBQUEsTUFBTSxFQUFFLE1BRE47QUFFRkMsSUFBQUEsT0FBTyxFQUFFO0FBQ1Asc0JBQWdCO0FBRFQsS0FGUDtBQUtGQyxJQUFBQSxHQUFHLFlBQUsxQixZQUFMLGtCQUxEO0FBTUYyQixJQUFBQSxJQUFJLEVBQUU7QUFDSnhCLE1BQUFBLFFBQVEsRUFBUkEsUUFESTtBQUVKTyxNQUFBQSxjQUFjLEVBQWRBLGNBRkk7QUFHSk8sTUFBQUEsSUFBSSxFQUFKQSxJQUhJO0FBSUpILE1BQUFBLFVBQVUsRUFBVkEsVUFKSTtBQUtKTyxNQUFBQSxTQUFTLEVBQVRBO0FBTEk7QUFOSixHQUFOLEVBY0dPLElBZEgsQ0FjUSxVQUFDQyxRQUFELEVBQWM7QUFDbEJwQixJQUFBQSxHQUFHLENBQUNxQixJQUFKLENBQVM7QUFDUEMsTUFBQUEsR0FBRyxFQUFFLDJCQURFO0FBRVBKLE1BQUFBLElBQUksRUFBRUUsUUFBUSxDQUFDRjtBQUZSLEtBQVQ7QUFJRCxHQW5CSCxXQW9CUyxVQUFDSyxLQUFELEVBQVc7QUFDaEJ2QixJQUFBQSxHQUFHLENBQUN3QixNQUFKLENBQVcsR0FBWCxFQUFnQkgsSUFBaEIsQ0FBcUI7QUFDbkJDLE1BQUFBLEdBQUcsRUFBRSw2QkFEYztBQUVuQkosTUFBQUEsSUFBSSxFQUFFSyxLQUFLLENBQUNILFFBQU4sQ0FBZUY7QUFGRixLQUFyQjtBQUlELEdBekJIO0FBMkJELENBdENEO2VBd0NlOUIsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgU1RPUkUgZnJvbSAnLi4vLi4vZGF0YS9kdW1teS11c2VyJztcclxuaW1wb3J0IHtcclxuICBBVVRIX1RZUEVTXHJcbn0gZnJvbSAnLi4vLi4vdXRpbC9jb25zdGFudHMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZUhhc2hTaWduYXR1cmVcclxufSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXHJcblxyXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5jb25zdCBQU1NfQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5QU1NfQkFTRV9VUkw7XHJcbmNvbnN0IHRlbmFudElkID0gcHJvY2Vzcy5lbnYuVEVOQU5UX0lEO1xyXG5jb25zdCBzZWNyZXQgPSBwcm9jZXNzLmVudi5TRUNSRVQ7XHJcblxyXG5yb3V0ZXIucG9zdCgnLycsIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IHVzZXJFeHRlcm5hbElkID0gU1RPUkUudXNlcnNbMF0udXVpZDtcclxuICBjb25zdCBhdXRoUGFyYW1zID0ge1xyXG4gICAgZ3VpVGV4dDogJ0RvIHlvdSBva2F5IHRoaXMgdHJhbnNhY3Rpb24nLFxyXG4gICAgZ3VpSGVhZGVyOiAnQXV0aG9yaXphdGlvbiByZXF1ZXN0ZWQnXHJcbiAgfTtcclxuICBjb25zdCB0eXBlID0gQVVUSF9UWVBFUy5PS1xyXG4gIGNvbnN0IGhhc2hTdHIgPSBgJHt0ZW5hbnRJZH0ke3VzZXJFeHRlcm5hbElkfSR7c2VjcmV0fWA7XHJcbiAgY29uc3Qgc2lnbmF0dXJlID0gY3JlYXRlSGFzaFNpZ25hdHVyZShoYXNoU3RyKTtcclxuICBjb25zb2xlLmxvZyhzaWduYXR1cmUpO1xyXG5cclxuICBheGlvcyh7XHJcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICB1cmw6IGAke1BTU19CQVNFX1VSTH0vZ2F0ZXdheS9hdXRoYCxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRlbmFudElkLFxyXG4gICAgICAgIHVzZXJFeHRlcm5hbElkLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgYXV0aFBhcmFtcyxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICByZXMuanNvbih7XHJcbiAgICAgICAgbXNnOiAnQXV0aGVudGljYXRpb24gc3VjY2Vzc2Z1bCcsXHJcbiAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YVxyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBtc2c6ICdBdXRoZW50aWNhdGlvbiB1bnN1Y2Nlc3NmdWwnLFxyXG4gICAgICAgIGRhdGE6IGVycm9yLnJlc3BvbnNlLmRhdGFcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbn0pXHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXIiXX0=